---
Time-stamp: "Tue Jun 08 15:37:01 EDT 2021 (nali@luthien.lan)"
title: Julia Tutorial Part 01 Language Elements
author: Na (Michael) Li, Ph.D.
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  cache : true
---

# Basic Value Types

## Numbers

The basic types are integers (`Int64`) and floats (`Float64`). The former is usually
automatically converted to the latter (e.g., in a division) when needed but not the
vice versa.

```julia
typeof(1)
```

```julia
typeof(1.0)
```

```julia
typeof(1 + 1.0)
```

```julia
typeof(2^5)                     # integer
```

```julia
typeof(20 / 2)                  # float
```

Floats can't be used as array indices.
```julia
a = [1 3 4];
b = 2.0;
a[b]                            # does not work
```

So they need be converted by type-casting.
```julia
a[Int64(b)]                    
```

But casting does not always work.
```julia
c = 3.001
Int64(c)                        # does not work
```

## Boolean Values

Boolean values are represented by `true` or `false`:
```julia
a = 1 < 2
```

```
typeof(a)
```

Boolean operators include `!` (not), `&&` and `||`.
```julia
!a && 3 > 4
```

## Special Values

[Missing values](https://docs.julialang.org/en/v1/manual/missing/), similar to `NA` in R, are represented by special value `missing`. There is also a package [Missings.jl](https://github.com/JuliaData/Missings.jl) that provide additional functionalities.

```julia
a = [1 missing]
```

```julia
typeof(a[2])
```

```julia
30 < a[2]
```

```julia
isless(30, missing)
```

```julia
ismissing(a[2])
```

Other special values, such as `Inf`,
```julia
1.0 / 0                 
```
or `NaN` (not a number).
```julia
0 / 0                   
```

## Strings and Symbols

```julia
str = "hello, world"
```

```julia
str[1]
```

```julia
str[end]
```

Interestingly, `*` operator (instead of `+`) is used to concatenate strings.
```julia
str * ".\n"
```

Julia allows interpolation into string literals using `$`, as in Perl.
```julia
"$str 1 + 2 = $(1 + 2)"
```

The `:` defines a symbol.
```julia
a = :str
eval(a)                         # evaluate to variable str
```

In Julia, regular expressions can be written using string literals prefixed with
various identifiers beginning with `r`.

```julia
re = r"^h[ea]l+o"
```

```julia
occursin(re, str)
```

## Arrays

As a scientific computing language like R, but unlike Python, arrays (vectors and
matrices) in Julia are built-in objects, with similar syntax as Matlab.

In a one-dimension (column) vector, the elements are separated by comma, semicolon or newline.
```julia
a = [1, 3, 5]
aa = [1; 3; 5]
aaa = [1
       3
       5]
```

```julia
size(a)
```

These two are the same.

```julia
isequal(a, aa)
```

When space is used, it becomes a row vector, or more precisely, a one-row matrix.
```julia
b = [2 3 4]
```

```julia
size(b)
```

Indexing can be done similarly:
```julia
a[2] + b[1]
```

But they are not the same as the following does not work:
```julia
a + b                           # error!
```

But this does
```julia
a + b[:]
```

Here is a matrix, where space separates columns, and semicolon (or newline) separates
rows. Note that comma is not accepted.

```julia
A = [1 3 3;
     4 5 6]
AA = [1 3 3
      4 5 6]
```

There doesn't seem to be a way to write out an higher dimensional array (tensor)
explicitly, instead one can use `reshape()` to create them.

```julia
B = reshape(collect(1:27), 3, 3, 3)
```

Arrays can be sliced:
```julia
B[1,:,1:2]
```

`[:]` converts to a vector:
```julia
B[:][1:5]
```

Although an array can contain arbitrary mix of values, there is no exact equivalent of "list" from R. 
```julia
C = ["Good Day", 3, false]
```

A dictionary is similar to a named list.
```julia
D = Dict("Car" => 200, "Train" => 300)
```

```julia
D["Car"]
```

More generally `list` so arbitrary, it is perhaps preferable for performance's sake
to define explicit the data structure:

```julia
struct Foo
    bar
    baz::Int
    qux::Float64
end
foo = Foo("Hello, world.", 23, 1.5)
```

```julia
typeof(foo)
```

# Dot Operator

For every binary operation like `^`, there is a corresponding "dot" operation `.^`
that is automatically defined to perform `^` element-by-element on arrays.

```julia
[1, 2, 3] .^ 2
```

More generation, for any function like `sin()`, the dot version `sin.()` performs a
broadcast operation.

# Data Frames

```julia
using DataFrames
df = DataFrame(A = 1:4, B = ["M", "F", "F", "M"])
```

```julia
df.B
```

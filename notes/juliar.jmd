---
Time-stamp: "Mon May 31 10:26:29 EDT 2021 (nali@luthien.lan)"
title: Julia Tutorial for Statisticians
author: Na (Michael) Li, Ph.D.
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  cache : true
---

# Introduction

[R](https://www.r-project.org) is the preferred statistical environment for many statisticians, while
[Python](https://www.python.org) is popular for "data science". Since Python is often taught as the first
programming language in high schools, it is considered as "easier" by many from a
computer science background. Popular machine learning (ML) toolkits like
[tensorflow](https://www.tensorflow.org) and [PyTorch](https://pytorch.org) come with Python API, even though they are
implemented in C/C++.

Both R (1993, its predecessor S was created in 1976) and Python (1991) are fairly
old. While modern features are added they are often implemented in a hodgepodge
fashion. For instance R has not one but three class systems (S3, S4, and R5). Python
3 made a major break from Python 2 in 2008 and cleaned up the class system. In
addition, since Python started out as a general purpose language, its built-in
"array" class is not suitable for scientific computation and has to rely on "narray"
implementation in the [NumPy](https://numpy.org) package.

Julia on the other first appeared only in 2012. It was designed from the ground-up as
a high-performance scientific computation language using just-in-time (JIT)
compilation, with built-in arrays (vector, matrix). It has grown rapidly in a short
time and has a large set of packages for a variety of use scenarios.

There are Julia evangelists who believe Julia, like many languages before, will be
the "one to rule them all".  For a statistician with a long history of using R, I
don't feel that Julia can replace R for day-to-day analysis. R still feels more
natural for interactive use, with built-in data frames and statistical modeling
language (`y ~ x + z`). Usually R is fast enough since computationally intensive
codes are implemented in C/C++/FORTRAN anyway. In fact R often feels faster, due to
Julia's overhead of frequent compiling-recompiling "barely-ahead-of-time".

Still I'm curious to learn Julia and in particular would like to use [Flux](https://fluxml.ai), which
is a pure-Julia implementation of Machine Learning toolkit. So here are my notes
which also serve as a Julia tutorial for statisticians with a background in R.

## Setup and Interface

Instead of [Jupyter Notebook](https://github.com/JuliaLang/IJulia.jl), [Pluto](https://juliapackages.com/p/pluto) or other IDEs ([Juno](https://junolab.org) or [VSCode](https://www.julia-vscode.org)),
my preference is Emacs. Thankfully, with [ESS](https://ess.r-project.org) supporting Julia and [Polymode](https://polymode.github.io),
it is seamless to run the codes interactively. With [Weave.jl](http://weavejl.mpastell.com/stable/), PDF or HTML output
can be generated as needed. Note that Weave.jl puts all the output of each chunk
together, instead of immediate following each line as in RMarkdown/knitr.

Here is the basic Emacs Lisp setup.
```elisp
(use-package julia-mode)
(use-package ess
  :mode (("\\.jl\\'" . ess-julia-mode)))
(use-package poly-markdown
  :ensure t
  :mode (("\\.[jJ]md\\'" . poly-markdown-mode)))
(add-to-list 'polymode-mode-name-override-alist '(julia . ess-julia))
;; https://github.com/zenitani/elisp/blob/master/smart-compile.el
(require 'smart-compile) 
(global-set-key (kbd "<f8>") 'smart-compile)
(add-to-list 'smart-compile-alist
             '("\\.[jJ]md\\'" . "julia -e 'using Weave; weave(\"%f\")'"))
```

## Key Differences with R

Coming from an R background, it is helpful to note some rather "peculiar" aspects of
Julia that contributes to its high-performance:

-   Julia has a strong type system (*dynamic*, *nominative* and *parametric*). The
    key paradigm of *multiple dispatch* depends on a function knowing the types of
    its arguments. Automatic type conversion that R programmers are used to (e.g.,
    from integer to float) often does not work.
    
-   Unlike R, arrays are always passed by reference to avoid memory allocation and
    copying. 

-   In addition to macros and functions, loops (`for` or `while`), `try`, `do`, and
    `let` blocks introduce their own scopes.

-   A functions is not automatically "vectorized" if not defined to take an array as
    argument. Instead the *dot operator* is needed to "broadcast" a function to each
    element of an array.
    
-   Julia also has powerful *syntactic* **macros** for *metaprogramming* which can be
    convenient.


# Language Elements

## Basic Value Types

The basic types are integers (`Int64`) and floats (`Float64`). The former is usually
automatically converted to the latter (e.g., in a division) when needed but not the
vice versa.

```julia
typeof(1)
```

```julia
typeof(1.0)
```

```julia
typeof(1 + 1.0)
```

```julia
typeof(2^5)                     # integer
```

```julia
typeof(20 / 2)                  # float
```

Floats can't be used as array indices.
```julia
a = [1 3 4];
b = 2.0;
a[b]                            # does not work
```

So they need be converted by type-casting.
```julia
a[Int64(b)]                    
```

But casting does not always work.
```julia
c = 3.001
Int64(c)                        # does not work
```

Boolean values are represented by `true` or `false`:
```julia
a = 1 < 2
```

```
typeof(a)
```

Boolean operators include `!` (not), `&&` and `||`.
```julia
!a && 3 > 4
```

### Special Values

[Missing values](https://docs.julialang.org/en/v1/manual/missing/), similar to `NA` in R, are represented by special value `missing`. There is also a package [Missings.jl](https://github.com/JuliaData/Missings.jl) that provide additional functionalities.

```julia
a = [1 missing]
```

```julia
typeof(a[2])
```

```julia
30 < a[2]
```

```julia
isless(30, missing)
```

```julia
ismissing(a[2])
```

Other special values, such as `Inf`,
```julia
1.0 / 0                 
```
or `NaN` (not a number).
```julia
0 / 0                   
```

### Strings and Symbols

```julia
str = "hello, world"
```

```julia
str[1]
```

```julia
str[end]
```

Interestingly, `*` operator (instead of `+`) is used to concatenate strings.
```julia
str * ".\n"
```

Julia allows interpolation into string literals using `$`, as in Perl.
```julia
"$str 1 + 2 = $(1 + 2)"
```

The `:` defines a symbol.
```julia
a = :str
eval(a)                         # evaluate to variable str
```

In Julia, regular expressions can be written using string literals prefixed with
various identifiers beginning with `r`.

```julia
re = r"^h[ea]l+o"
```

```julia
occursin(re, str)
```

## Arrays

As a scientific computing language like R, but unlike Python, arrays (vectors and
matrices) in Julia are built-in objects, with similar syntax as Matlab,

A one-dimension vector:
```julia
a = [1, 3, 5]
```

```julia
size(a)
```

A row vector is in factor a 1-by-3 matrix.
```julia
b = [2 3 4]
```

```julia
size(b)
```

Indexing can be done similarly:
```julia
a[2] + b[1]
```

But they are not the same as the following does not work:
```julia
a + b                           # error!
```

But this does
```julia
a + b[:]
```

Matrix and higher dimensional arrays ("tensors") can be defined in Matlab-like syntax:
```julia
A = [1 3 3;
     4 5 6]
```

```julia
B = reshape(collect(1:27), 3, 3, 3)
```

Arrays can be sliced:
```julia
B[1,:,1:2]
```

`[:]` converts to a vector:
```julia
B[:][1:5]
```

Although an array can contain arbitrary mix of values, there is no exact equivalent of "list" from R. 
```julia
C = ["Good Day", 3, false]
```

A dictionary is similar to a named list.
```julia
D = Dict("Car" => 200, "Train" => 300)
```

```julia
D["Car"]
```

More generally `list` so arbitrary, it is perhaps preferable for performance's sake
to define explicit the data structure:

```julia
struct Foo
    bar
    baz::Int
    qux::Float64
end
foo = Foo("Hello, world.", 23, 1.5)
```

```julia
typeof(foo)
```

## Data Frames

```julia
using DataFrames
df = DataFrame(A = 1:4, B = ["M", "F", "F", "M"])
```

```julia
df.B
```
